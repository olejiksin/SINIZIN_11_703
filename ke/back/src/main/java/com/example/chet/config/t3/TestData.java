package com.example.chet.config.t3;// Generated by Selenium IDE


import com.example.chet.config.tests.User;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.io.*;
import java.util.*;


public class TestData {

  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  private ObjectMapper mapper;
  @BeforeClass
  public void setUp() {
    System.setProperty("webdriver.gecko.driver", "C:\\Users\\oleji\\Downloads\\geckodriver.exe");
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
    mapper = new ObjectMapper();
  }
@DataProvider(name="data-provider")

public Object[][] dataProviderMethod() throws IOException {


  List<User> list=new ArrayList<>();
    int n=15;
    for(int i=0;i<3;i++){
      list.add(new User(getAlphaNumericString(n),getAlphaNumericString(n)));
    }
    mapper.writeValue(new File("filename.txt"),list);
  File file=new File( "filename.txt");
  FileReader fileReader=new FileReader(file);
  String line;
  try (BufferedReader bufferedReader = new BufferedReader(fileReader)) {
    line=bufferedReader.readLine() ;
  }
  System.out.println(line);
  List<User> string= Arrays.asList(mapper.readValue(line,User[].class));

  return new Object[][] { { string.get(0).getLogin()}, { string.get(1).getLogin()} ,{ string.get(2).getLogin()}};
}

  @Test(dataProvider = "data-provider")
  public void testMethod(String data) throws IOException {
    System.out.println("data is:"  + data);

    driver.get("https://hub.docker.com/");
    WebDriverWait webDriverWait = new WebDriverWait(driver, 5);
    webDriverWait.until(ExpectedConditions.elementToBeClickable(By.id("log_in")));
    driver.findElement(By.id("log_in")).click();
    driver.findElement(By.id("nw_username")).sendKeys(data);
    driver.findElement(By.id("nw_password")).click();
    driver.findElement(By.id("nw_password")).sendKeys(data);
    driver.findElement(By.id("nw_submit")).click();


  }

  private String getAlphaNumericString(int n) {

    String AlphaNumericString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
            + "0123456789"
            + "abcdefghijklmnopqrstuvxyz"
            +"~!@#$%^&*()_+<,>.?/]}{[";

    StringBuilder sb = new StringBuilder(n);

    for (int i = 0; i < n; i++) {
      int index
              = (int)(AlphaNumericString.length()
              * Math.random());
      sb.append(AlphaNumericString
              .charAt(index));
    }
    return sb.toString();
  }
}
